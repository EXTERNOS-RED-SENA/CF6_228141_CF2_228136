{"remainingRequest":"/home/runner/work/CF6_228141_CF2_228136/CF6_228141_CF2_228136/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF6_228141_CF2_228136/CF6_228141_CF2_228136/src/pages/Tema1.vue?vue&type=template&id=73a72a84","dependencies":[{"path":"/home/runner/work/CF6_228141_CF2_228136/CF6_228141_CF2_228136/src/pages/Tema1.vue","mtime":1734911426127},{"path":"/home/runner/work/CF6_228141_CF2_228136/CF6_228141_CF2_228136/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF6_228141_CF2_228136/CF6_228141_CF2_228136/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF6_228141_CF2_228136/CF6_228141_CF2_228136/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF6_228141_CF2_228136/CF6_228141_CF2_228136/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF6_228141_CF2_228136/CF6_228141_CF2_228136/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF6_228141_CF2_228136/CF6_228141_CF2_228136/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}